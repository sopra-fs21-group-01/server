package ch.uzh.ifi.hase.soprafs21.entity;
import javax.persistence.*;
import java.io.Serial;
import java.io.Serializable;
import java.util.ArrayList;

// Basic implementation of Game entity. Has a unique, autogenerated ID, Takes a host, and a list of players.
// Its further logic is yet to be implemented

@Entity
@Table(name = "GAME")
public class Game implements Serializable {

    // the serialVersionUID makes sure that the sender and receiver of a serialized object have loaded the same object
    @Serial
    private static final long serialVersionUID = 3L;


    // id will be the same as the lobby ID where the game was iniialized
    @Id
    private Long id;

    // is given the same host from the lobby that started the game
    @Column(nullable = false)
    private String host;

    @Column(nullable = false)
    private String[] playerList;

    @Column(nullable = false)
    private ArrayList cardStack;

    public static long getSerialVersionUID() {
        return serialVersionUID;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getHost() {
        return host;
    }

    public void setHost(String host) {
        this.host = host;
    }

    public String[] getPlayerList() {
        return playerList;
    }

    public void setPlayerList(String[] playerList) {
        this.playerList = playerList;
    }

    public ArrayList getCardStack() {
        return cardStack;
    }

    public void setCardStack(ArrayList cardStack) {
        this.cardStack = cardStack;
    }


    /**
    @Column(nullable = false)
    private String gamemode; */

    /**
    public ArrayList<Hand> players = new ArrayList<Hand>();
    public ArrayList<Card> playedCards = new ArrayList<Card>();
    public boolean gameDirection = false; //true = clockwise

    //index of players ArrayList
    public int currentPlayer = 0;



    public void setPlayers(Hand hand){
        this.players.add(hand);
    }


    public void initializeHands() {
        for (Hand i : players) {
            i.initializeHand();
        }
    }


    public Card getLastCard(){
        return playedCards.get(playedCards.size() - 1);
    }
     */

}
